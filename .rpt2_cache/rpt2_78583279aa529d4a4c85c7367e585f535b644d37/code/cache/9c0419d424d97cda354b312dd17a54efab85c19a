{"code":"import MidiReader from './MidiReader';\r\nimport Track from './Track';\r\nimport Cursor from './Cursor';\r\nvar Midi = /** @class */ (function () {\r\n    function Midi(data) {\r\n        this.format = 0;\r\n        this.ppqn = 480;\r\n        this.tracks = [];\r\n        this._tickToSecond = {};\r\n        this._tempoEvents = [];\r\n        if (!!data) {\r\n            var reader = new MidiReader(data);\r\n            var headerChunk = reader.readChunk();\r\n            var headerReader = new MidiReader(headerChunk.data);\r\n            this.format = headerReader.readInt(2);\r\n            if (this.format == 2)\r\n                throw \"MIDI format 2 not supported\";\r\n            var numberOfTracks = headerReader.readInt(2);\r\n            this.ppqn = headerReader.readInt(2); // assumes metrical timing\r\n            for (var i = 0; i < numberOfTracks; i++) {\r\n                var trackChunk = reader.readChunk();\r\n                this.createTrack(trackChunk.data);\r\n            }\r\n        }\r\n        else {\r\n            var tempoTrack = this.createTrack();\r\n        }\r\n    }\r\n    Midi.prototype.createTrack = function (data) {\r\n        var track = new Track(data);\r\n        track.midi = this;\r\n        this.tracks.push(track);\r\n        return track;\r\n    };\r\n    Midi.prototype.newCursor = function () {\r\n        return new Cursor(this.events.sort(function (e1, e2) { return e1.tick - e2.tick; }));\r\n    };\r\n    Object.defineProperty(Midi.prototype, \"notes\", {\r\n        get: function () {\r\n            return this.tracks\r\n                .map(function (track) { return track.notes; })\r\n                .reduce(function (a, b) { return a.concat(b); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Midi.prototype, \"events\", {\r\n        get: function () {\r\n            return this.tracks\r\n                .map(function (track) { return track.events; })\r\n                .reduce(function (a, b) { return a.concat(b); });\r\n            //.sort(function(e1,e2){return e1.tick < e2.tick});\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Midi.prototype, \"tempoEvents\", {\r\n        get: function () {\r\n            if (this._tempoEvents.length > 0)\r\n                return this._tempoEvents; // return if memoized\r\n            // format 0: All events are on the zeroth track, including tempo events\r\n            // format 1: All tempo events are on the zeroth track\r\n            // format 2: Every track has tempo events (not supported)\r\n            return this._tempoEvents = this.tracks[0].events.filter(function (event) {\r\n                return event.subtype == 'setTempo';\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Midi.prototype, \"duration\", {\r\n        get: function () {\r\n            return this.notes\r\n                .map(function (note) { return note.offSecond; })\r\n                .reduce(function (a, b) { return Math.max(a, b); }, 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Midi.prototype.tickToSecond = function (tick) {\r\n        if (this._tickToSecond[tick])\r\n            return this._tickToSecond[tick];\r\n        var currentTick = 0;\r\n        var currentTempo = 500000;\r\n        var totalTime = 0;\r\n        for (var i = 0; i < this.tempoEvents.length; i++) {\r\n            var event = this.tempoEvents[i];\r\n            if (event.tick >= tick)\r\n                break;\r\n            totalTime += ((event.tick - currentTick) / this.ppqn) * currentTempo / 1000000.0;\r\n            currentTick = event.tick;\r\n            currentTempo = event.tempo;\r\n        }\r\n        totalTime += ((tick - currentTick) / this.ppqn) * currentTempo / 1000000.0;\r\n        return this._tickToSecond[tick] = totalTime;\r\n    };\r\n    Midi.prototype.notesOnAt = function (second) {\r\n        return [].concat.apply([], this.tracks.map(function (track) {\r\n            return track.notesOnAt(second);\r\n        }));\r\n    };\r\n    Midi.prototype.notesOnDuring = function (onSecond, offSecond) {\r\n        return [].concat.apply([], this.tracks.map(function (track) {\r\n            return track.notesOnDuring(onSecond, offSecond);\r\n        }));\r\n    };\r\n    return Midi;\r\n}());\r\nexport default Midi;\r\n"}
