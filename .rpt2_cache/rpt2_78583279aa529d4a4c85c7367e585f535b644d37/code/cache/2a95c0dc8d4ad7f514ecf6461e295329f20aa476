{"code":"import Event from './Event';\r\nvar MidiReader = /** @class */ (function () {\r\n    function MidiReader(data) {\r\n        this.data = data;\r\n        this.position = 0;\r\n    }\r\n    MidiReader.prototype.read = function (length) {\r\n        var result = this.data.substr(this.position, length);\r\n        this.position += length;\r\n        return result;\r\n    };\r\n    MidiReader.prototype.readInt = function (numberOfBytes) {\r\n        var result = 0;\r\n        while (numberOfBytes > 0) {\r\n            result <<= 8;\r\n            result += this.data.charCodeAt(this.position);\r\n            this.position += 1;\r\n            numberOfBytes -= 1;\r\n        }\r\n        return result;\r\n    };\r\n    MidiReader.prototype.readVLQ = function () {\r\n        var result = 0;\r\n        var octet;\r\n        do {\r\n            result <<= 7;\r\n            octet = this.readInt(1);\r\n            result += (octet & 0x7f);\r\n        } while (octet & 0x80);\r\n        return result;\r\n    };\r\n    MidiReader.prototype.readEvent = function () {\r\n        var event = new Event();\r\n        event.deltaTime = this.readVLQ();\r\n        var firstByte = this.readInt(1);\r\n        if (firstByte == 0xff) {\r\n            event.type = 'meta';\r\n            var subtypeByte = this.readInt(1);\r\n            var length_1 = this.readVLQ();\r\n            switch (subtypeByte) {\r\n                case 0x00:\r\n                    event.subtype = 'sequenceNumber';\r\n                    if (length_1 != 2)\r\n                        throw \"Length for this sequenceNumber event was \" + length_1 + \", but must be 2\";\r\n                    event.number = this.readInt(2);\r\n                    return event;\r\n                case 0x01:\r\n                    event.subtype = 'text';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x02:\r\n                    event.subtype = 'copyright';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x03:\r\n                    event.subtype = 'trackName';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x04:\r\n                    event.subtype = 'instrumentName';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x05:\r\n                    event.subtype = 'lyric';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x06:\r\n                    event.subtype = 'marker';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x07:\r\n                    event.subtype = 'cuePoint';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x08:\r\n                    event.subtype = 'programName';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x09:\r\n                    event.subtype = 'deviceName';\r\n                    event.text = this.read(length_1);\r\n                    return event;\r\n                case 0x20:\r\n                    event.subtype = 'channelPrefix';\r\n                    event.text = this.readInt(1);\r\n                    if (length_1 != 1)\r\n                        throw \"Length for this midiChannelPrefix event was \" + length_1 + \", but must be 1\";\r\n                    return event;\r\n                case 0x21:\r\n                    event.subtype = 'port';\r\n                    event.port = this.readInt(1);\r\n                    if (length_1 != 1)\r\n                        throw \"Length for this port event was \" + length_1 + \", but must be 1\";\r\n                    return event;\r\n                case 0x2f:\r\n                    event.subtype = 'endOfTrack';\r\n                    if (length_1 != 0)\r\n                        throw \"Length for this endOfTrack event was \" + length_1 + \", but must be 0\";\r\n                    return event;\r\n                case 0x51:\r\n                    event.subtype = 'setTempo';\r\n                    if (length_1 != 3)\r\n                        throw \"Length for this setTempo event was \" + length_1 + \", but must be 3\";\r\n                    event.tempo = this.readInt(3);\r\n                    return event;\r\n                case 0x54:\r\n                    event.subtype = 'smpteOffset';\r\n                    if (length_1 != 5)\r\n                        throw \"Length for this smpteOffset event was \" + length_1 + \", but must be 5\";\r\n                    var hourByte = this.readInt(1);\r\n                    event.frameRate = { 0: 24, 1: 25, 2: 29.97, 3: 30 }[hourByte >> 6];\r\n                    event.hours = hourByte & 0x1f;\r\n                    event.minutes = this.readInt(1);\r\n                    event.seconds = this.readInt(1);\r\n                    event.frames = this.readInt(1);\r\n                    event.subframes = this.readInt(1);\r\n                    return event;\r\n                case 0x58:\r\n                    event.subtype = 'timeSignature';\r\n                    if (length_1 != 4)\r\n                        throw \"Length for this timeSignature event was \" + length_1 + \", but must be 4\";\r\n                    event.numerator = this.readInt(1);\r\n                    event.denominator = Math.pow(2, this.readInt(1));\r\n                    event.metronome = this.readInt(1);\r\n                    event.thirtySeconds = this.readInt(1);\r\n                    return event;\r\n                case 0x59:\r\n                    event.subtype = 'keySignature';\r\n                    if (length_1 != 2)\r\n                        throw \"Length for this keySignature event was \" + length_1 + \", but must be 2\";\r\n                    event.key = this.readInt(1);\r\n                    if (event.key > 127)\r\n                        event.key = 128 - event.key;\r\n                    event.scale = { 0: 'major', 1: 'minor' }[this.readInt(1)];\r\n                    return event;\r\n                case 0x7f:\r\n                    event.subtype = 'sequencerSpecific';\r\n                    event.data = this.read(length_1);\r\n                    return event;\r\n            }\r\n        }\r\n        else if (firstByte == 0xf0) {\r\n            event.type = 'sysEx';\r\n            var length_2 = this.readVLQ();\r\n            event.data = this.read(length_2);\r\n            return event;\r\n        }\r\n        else {\r\n            event.type = 'channel';\r\n            var statusByte = void 0, dataByte1 = void 0;\r\n            if (firstByte < 0x80) { // running status; first byte is the first data byte\r\n                dataByte1 = firstByte;\r\n                statusByte = this.lastStatusByte;\r\n            }\r\n            else { // new status; first byte is the status byte\r\n                dataByte1 = this.readInt(1);\r\n                statusByte = firstByte;\r\n                this.lastStatusByte = statusByte;\r\n            }\r\n            event.channel = statusByte & 0x0f;\r\n            var eventSubtype = statusByte >> 4;\r\n            switch (eventSubtype) {\r\n                case 0x8:\r\n                    event.subtype = 'noteOff';\r\n                    event.number = dataByte1;\r\n                    event.velocity = this.readInt(1);\r\n                    return event;\r\n                case 0x9:\r\n                    event.number = dataByte1;\r\n                    event.velocity = this.readInt(1);\r\n                    event.subtype = (event.velocity == 0 ? 'noteOff' : 'noteOn');\r\n                    return event;\r\n                case 0xa:\r\n                    event.subtype = 'aftertouch';\r\n                    event.number = dataByte1;\r\n                    event.pressure = this.readInt(1);\r\n                    return event;\r\n                case 0xb:\r\n                    event.subtype = 'controller';\r\n                    event.controller = dataByte1;\r\n                    event.value = this.readInt(1);\r\n                    return event;\r\n                case 0xc:\r\n                    event.subtype = 'program';\r\n                    event.program = dataByte1;\r\n                    return event;\r\n                case 0xd:\r\n                    event.subtype = 'channelPressure';\r\n                    event.pressure = dataByte1;\r\n                    return event;\r\n                case 0xe:\r\n                    event.subtype = 'pitchBend';\r\n                    event.value = (this.readInt(1) << 7) + dataByte1;\r\n                    return event;\r\n            }\r\n        }\r\n    };\r\n    MidiReader.prototype.readChunk = function () {\r\n        var type = this.read(4);\r\n        var length = this.readInt(4);\r\n        var data = this.read(length);\r\n        return {\r\n            type: type,\r\n            length: length,\r\n            data: data,\r\n        };\r\n    };\r\n    ;\r\n    MidiReader.prototype.isAtEndOfFile = function () {\r\n        return this.position >= this.data.length;\r\n    };\r\n    ;\r\n    return MidiReader;\r\n}());\r\nexport default MidiReader;\r\n"}
