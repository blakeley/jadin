{"code":"import MidiReader from './MidiReader';\r\nimport Note from './Note';\r\nvar Track = /** @class */ (function () {\r\n    function Track(data) {\r\n        if (data === void 0) { data = ''; }\r\n        this.events = [];\r\n        this.notes = [];\r\n        this._noteOnEvents = {};\r\n        var reader = new MidiReader(data);\r\n        var currentTick = 0;\r\n        while (!reader.isAtEndOfFile()) {\r\n            var event_1 = reader.readEvent();\r\n            currentTick += event_1.deltaTime;\r\n            event_1.tick = currentTick;\r\n            this.addEvent(event_1);\r\n        }\r\n        // remove unpaired noteOn events\r\n        for (var number in this._noteOnEvents) {\r\n            this.removeEvent(this._noteOnEvents[number]);\r\n        }\r\n    }\r\n    Track.prototype.addEvent = function (event) {\r\n        event.track = this;\r\n        this.events.push(event);\r\n        switch (event.subtype) {\r\n            case 'noteOn':\r\n                var invalidEvent = this._noteOnEvents[event.number];\r\n                if (!!invalidEvent) { // previous noteOn event was invalid\r\n                    this.removeEvent(invalidEvent);\r\n                }\r\n                this._noteOnEvents[event.number] = event;\r\n                break;\r\n            case 'noteOff':\r\n                var noteOnEvent = this._noteOnEvents[event.number];\r\n                if (!noteOnEvent || noteOnEvent.tick >= event.tick) {\r\n                    // this noteOff event is invalid - needs corresponding preceding noteOn event\r\n                    this.removeEvent(event);\r\n                }\r\n                else {\r\n                    var note = new Note(noteOnEvent, event);\r\n                    note.track = this;\r\n                    this.notes.push(note);\r\n                    delete this._noteOnEvents[event.number];\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    Track.prototype.removeEvent = function (event) {\r\n        var index = this.events.lastIndexOf(event); // index will typically be near the end of the array\r\n        this.events.splice(index, 1);\r\n    };\r\n    Object.defineProperty(Track.prototype, \"index\", {\r\n        get: function () {\r\n            return this.midi.tracks.indexOf(this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Track.prototype.notesOnAt = function (second) {\r\n        return this.notes.filter(function (note) {\r\n            return note.onAt(second);\r\n        });\r\n    };\r\n    Track.prototype.notesOnDuring = function (onSecond, offSecond) {\r\n        return this.notes.filter(function (note) {\r\n            return note.onDuring(onSecond, offSecond);\r\n        });\r\n    };\r\n    return Track;\r\n}());\r\nexport default Track;\r\n"}
